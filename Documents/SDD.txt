System Design Document 
for C.R.A.P. the CRAP



  Version: 1.1
 Date: 2016-05-18

  Authors: 
Andrea Buchholz
Rebecca Finne
Maija Happonen 
 Lisa Larsson 




























This version overrides all previous versions
1 Introduction

1.1 Design goals
The application is divided with clearly seperated modules. As much as possible the application is also general, as to be able to switch models and frameworks quite easily. The application currently loads tmx files as maps. made in the program Tiled[a], therefore the landscape of the CRAP could easily be switched to a different setting than Chalmers campus Johanneberg. Creating maps in this tools also gives the possibility of adding multiple more types of collision.
1.2 Definitions, acronyms and abbreviations 
MVC - Model-View-Controller. The structure of the code.
libGDX - library for Gradle projects.
Gradle - special kind of project helping with compiling etc.
Tiled map - a map build up by different tiles.
Mascot - the characters to be caught in the CRAP
Tmx-files - type of file that tiled maps are saved as. 
Collision
Interaction




2 System design

2.1 Overview 
The code will be built with a MVC design, where the controller knows about the model and the view. The view however only knows about the model. The model does not know about either controller or view. 


**Add about external libraries?
 2.1.1 Aggregates
The program will have one “main class” from each section (model, view and controller). That all the other classes will go through before something is changing or printed out. 


2.1.2 The model functionality
The controller and view classes will be using methods from the frame work libGDX[b] and the model will not use any external libraries. 


2.1.3 Unique identifiers, global look­ups
The player will be unique
The mascot’s and human’s names will be unique. 


 2.1.4 Events pathes
Inputs from the user will be handled in the GameController-class and some other controller classes like HowToPlayController and MenuController. LibGDX input processor will be used to notify the program that something in typed on the keyboard.
2.1.5 Internal representation of text
The text for the mascots and carachters will be stored in arrays and will be randomly picked when player interacts with them. [c]
2.1.6 Lookups
References to the model goes through the view and the controller.


2.2 Software decomposition

2.2.1 General
A main class will be used when the CRAP is starting and create the main controller, view  and model.
The main controller, view and model will create the rest of the controllers, views and models. [d]


Package diagram. For each package an UML class diagram in 
appendix


2.2.2 Decomposition into subsystems 
To be filled in


2.2.3 Layering
To be filled in



2.2.4 Dependency analysis
Dependencies from the frame work libGDX are used in the view and controller classes. 
Insert image?
More should be filled in


2.3 Concurrency issues
To be filled in

2.4 Persistent data management
The tmx files and other files used in the CRAP will be stored in a folder assets.




2.5 Access control and security
NA
2.6 Boundary conditions 
NA



3 References


To be filled in


 APPENDIX 

[a]Referens
[b]Vet inte om detta är rätt alls
[c]Fortfarande ingen aning
[d]Typ såhär? Måste skriva mer i så fall